// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/19/2021 17:39:52"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ARQ_Lab1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ARQ_Lab1_vlg_sample_tst(
	Clock,
	Clock14,
	Externo0,
	Externo1,
	Externo2,
	Externo3,
	sampler_tx
);
input  Clock;
input  Clock14;
input  Externo0;
input  Externo1;
input  Externo2;
input  Externo3;
output sampler_tx;

reg sample;
time current_time;
always @(Clock or Clock14 or Externo0 or Externo1 or Externo2 or Externo3)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ARQ_Lab1_vlg_check_tst (
	Cout,
	Enderecoteste,
	Instrucao,
	N,
	R0,
	R1,
	R2,
	Write_Enable,
	Z,
	sampler_rx
);
input  Cout;
input [5:0] Enderecoteste;
input [16:0] Instrucao;
input  N;
input [3:0] R0;
input [3:0] R1;
input [3:0] R2;
input  Write_Enable;
input  Z;
input sampler_rx;

reg  Cout_expected;
reg [5:0] Enderecoteste_expected;
reg [16:0] Instrucao_expected;
reg  N_expected;
reg [3:0] R0_expected;
reg [3:0] R1_expected;
reg [3:0] R2_expected;
reg  Write_Enable_expected;
reg  Z_expected;

reg  Cout_prev;
reg [5:0] Enderecoteste_prev;
reg [16:0] Instrucao_prev;
reg  N_prev;
reg [3:0] R0_prev;
reg [3:0] R1_prev;
reg [3:0] R2_prev;
reg  Write_Enable_prev;
reg  Z_prev;

reg [16:0] Instrucao_expected_prev;
reg [3:0] R0_expected_prev;
reg [3:0] R1_expected_prev;
reg [3:0] R2_expected_prev;

reg [16:0] last_Instrucao_exp;
reg [3:0] last_R0_exp;
reg [3:0] last_R1_exp;
reg [3:0] last_R2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	Cout_prev = Cout;
	Enderecoteste_prev = Enderecoteste;
	Instrucao_prev = Instrucao;
	N_prev = N;
	R0_prev = R0;
	R1_prev = R1;
	R2_prev = R2;
	Write_Enable_prev = Write_Enable;
	Z_prev = Z;
end

// update expected /o prevs

always @(trigger)
begin
	Instrucao_expected_prev = Instrucao_expected;
	R0_expected_prev = R0_expected;
	R1_expected_prev = R1_expected;
	R2_expected_prev = R2_expected;
end


// expected Instrucao[ 16 ]
initial
begin
	Instrucao_expected[16] = 1'bX;
	Instrucao_expected[16] = #999000 1'b0;
end 
// expected Instrucao[ 15 ]
initial
begin
	Instrucao_expected[15] = 1'bX;
	Instrucao_expected[15] = #999000 1'b0;
end 
// expected Instrucao[ 14 ]
initial
begin
	Instrucao_expected[14] = 1'bX;
	Instrucao_expected[14] = #999000 1'b0;
end 
// expected Instrucao[ 13 ]
initial
begin
	Instrucao_expected[13] = 1'bX;
	Instrucao_expected[13] = #999000 1'b0;
end 
// expected Instrucao[ 12 ]
initial
begin
	Instrucao_expected[12] = 1'bX;
	Instrucao_expected[12] = #999000 1'b0;
end 
// expected Instrucao[ 11 ]
initial
begin
	Instrucao_expected[11] = 1'bX;
	Instrucao_expected[11] = #999000 1'b0;
end 
// expected Instrucao[ 10 ]
initial
begin
	Instrucao_expected[10] = 1'bX;
	Instrucao_expected[10] = #999000 1'b0;
end 
// expected Instrucao[ 9 ]
initial
begin
	Instrucao_expected[9] = 1'bX;
	Instrucao_expected[9] = #999000 1'b0;
end 
// expected Instrucao[ 8 ]
initial
begin
	Instrucao_expected[8] = 1'bX;
	Instrucao_expected[8] = #999000 1'b0;
end 
// expected Instrucao[ 7 ]
initial
begin
	Instrucao_expected[7] = 1'bX;
	Instrucao_expected[7] = #999000 1'b0;
end 
// expected Instrucao[ 6 ]
initial
begin
	Instrucao_expected[6] = 1'bX;
	Instrucao_expected[6] = #999000 1'b0;
end 
// expected Instrucao[ 5 ]
initial
begin
	Instrucao_expected[5] = 1'bX;
	Instrucao_expected[5] = #999000 1'b0;
end 
// expected Instrucao[ 4 ]
initial
begin
	Instrucao_expected[4] = 1'bX;
	Instrucao_expected[4] = #999000 1'b0;
end 
// expected Instrucao[ 3 ]
initial
begin
	Instrucao_expected[3] = 1'bX;
	Instrucao_expected[3] = #999000 1'b0;
end 
// expected Instrucao[ 2 ]
initial
begin
	Instrucao_expected[2] = 1'bX;
	Instrucao_expected[2] = #999000 1'b0;
end 
// expected Instrucao[ 1 ]
initial
begin
	Instrucao_expected[1] = 1'bX;
	Instrucao_expected[1] = #999000 1'b0;
end 
// expected Instrucao[ 0 ]
initial
begin
	Instrucao_expected[0] = 1'bX;
	Instrucao_expected[0] = #999000 1'b0;
end 
// expected R0[ 3 ]
initial
begin
	R0_expected[3] = 1'bX;
	R0_expected[3] = #999000 1'b0;
end 
// expected R0[ 2 ]
initial
begin
	R0_expected[2] = 1'bX;
	R0_expected[2] = #999000 1'b0;
end 
// expected R0[ 1 ]
initial
begin
	R0_expected[1] = 1'bX;
	R0_expected[1] = #999000 1'b0;
end 
// expected R0[ 0 ]
initial
begin
	R0_expected[0] = 1'bX;
	R0_expected[0] = #999000 1'b0;
end 
// expected R1[ 3 ]
initial
begin
	R1_expected[3] = 1'bX;
	R1_expected[3] = #999000 1'b0;
end 
// expected R1[ 2 ]
initial
begin
	R1_expected[2] = 1'bX;
	R1_expected[2] = #999000 1'b0;
end 
// expected R1[ 1 ]
initial
begin
	R1_expected[1] = 1'bX;
	R1_expected[1] = #999000 1'b0;
end 
// expected R1[ 0 ]
initial
begin
	R1_expected[0] = 1'bX;
	R1_expected[0] = #999000 1'b0;
end 
// expected R2[ 3 ]
initial
begin
	R2_expected[3] = 1'bX;
	R2_expected[3] = #999000 1'b0;
end 
// expected R2[ 2 ]
initial
begin
	R2_expected[2] = 1'bX;
	R2_expected[2] = #999000 1'b0;
end 
// expected R2[ 1 ]
initial
begin
	R2_expected[1] = 1'bX;
	R2_expected[1] = #999000 1'b0;
end 
// expected R2[ 0 ]
initial
begin
	R2_expected[0] = 1'bX;
	R2_expected[0] = #999000 1'b0;
end 
// generate trigger
always @(Cout_expected or Cout or Enderecoteste_expected or Enderecoteste or Instrucao_expected or Instrucao or N_expected or N or R0_expected or R0 or R1_expected or R1 or R2_expected or R2 or Write_Enable_expected or Write_Enable or Z_expected or Z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Cout = %b | expected Enderecoteste = %b | expected Instrucao = %b | expected N = %b | expected R0 = %b | expected R1 = %b | expected R2 = %b | expected Write_Enable = %b | expected Z = %b | ",Cout_expected_prev,Enderecoteste_expected_prev,Instrucao_expected_prev,N_expected_prev,R0_expected_prev,R1_expected_prev,R2_expected_prev,Write_Enable_expected_prev,Z_expected_prev);
	$display("| real Cout = %b | real Enderecoteste = %b | real Instrucao = %b | real N = %b | real R0 = %b | real R1 = %b | real R2 = %b | real Write_Enable = %b | real Z = %b | ",Cout_prev,Enderecoteste_prev,Instrucao_prev,N_prev,R0_prev,R1_prev,R2_prev,Write_Enable_prev,Z_prev);
`endif
	if (
		( Instrucao_expected_prev[0] !== 1'bx ) && ( Instrucao_prev[0] !== Instrucao_expected_prev[0] )
		&& ((Instrucao_expected_prev[0] !== last_Instrucao_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Instrucao_exp[0] = Instrucao_expected_prev[0];
	end
	if (
		( Instrucao_expected_prev[1] !== 1'bx ) && ( Instrucao_prev[1] !== Instrucao_expected_prev[1] )
		&& ((Instrucao_expected_prev[1] !== last_Instrucao_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Instrucao_exp[1] = Instrucao_expected_prev[1];
	end
	if (
		( Instrucao_expected_prev[2] !== 1'bx ) && ( Instrucao_prev[2] !== Instrucao_expected_prev[2] )
		&& ((Instrucao_expected_prev[2] !== last_Instrucao_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Instrucao_exp[2] = Instrucao_expected_prev[2];
	end
	if (
		( Instrucao_expected_prev[3] !== 1'bx ) && ( Instrucao_prev[3] !== Instrucao_expected_prev[3] )
		&& ((Instrucao_expected_prev[3] !== last_Instrucao_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Instrucao_exp[3] = Instrucao_expected_prev[3];
	end
	if (
		( Instrucao_expected_prev[4] !== 1'bx ) && ( Instrucao_prev[4] !== Instrucao_expected_prev[4] )
		&& ((Instrucao_expected_prev[4] !== last_Instrucao_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Instrucao_exp[4] = Instrucao_expected_prev[4];
	end
	if (
		( Instrucao_expected_prev[5] !== 1'bx ) && ( Instrucao_prev[5] !== Instrucao_expected_prev[5] )
		&& ((Instrucao_expected_prev[5] !== last_Instrucao_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Instrucao_exp[5] = Instrucao_expected_prev[5];
	end
	if (
		( Instrucao_expected_prev[6] !== 1'bx ) && ( Instrucao_prev[6] !== Instrucao_expected_prev[6] )
		&& ((Instrucao_expected_prev[6] !== last_Instrucao_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Instrucao_exp[6] = Instrucao_expected_prev[6];
	end
	if (
		( Instrucao_expected_prev[7] !== 1'bx ) && ( Instrucao_prev[7] !== Instrucao_expected_prev[7] )
		&& ((Instrucao_expected_prev[7] !== last_Instrucao_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Instrucao_exp[7] = Instrucao_expected_prev[7];
	end
	if (
		( Instrucao_expected_prev[8] !== 1'bx ) && ( Instrucao_prev[8] !== Instrucao_expected_prev[8] )
		&& ((Instrucao_expected_prev[8] !== last_Instrucao_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Instrucao_exp[8] = Instrucao_expected_prev[8];
	end
	if (
		( Instrucao_expected_prev[9] !== 1'bx ) && ( Instrucao_prev[9] !== Instrucao_expected_prev[9] )
		&& ((Instrucao_expected_prev[9] !== last_Instrucao_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Instrucao_exp[9] = Instrucao_expected_prev[9];
	end
	if (
		( Instrucao_expected_prev[10] !== 1'bx ) && ( Instrucao_prev[10] !== Instrucao_expected_prev[10] )
		&& ((Instrucao_expected_prev[10] !== last_Instrucao_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Instrucao_exp[10] = Instrucao_expected_prev[10];
	end
	if (
		( Instrucao_expected_prev[11] !== 1'bx ) && ( Instrucao_prev[11] !== Instrucao_expected_prev[11] )
		&& ((Instrucao_expected_prev[11] !== last_Instrucao_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Instrucao_exp[11] = Instrucao_expected_prev[11];
	end
	if (
		( Instrucao_expected_prev[12] !== 1'bx ) && ( Instrucao_prev[12] !== Instrucao_expected_prev[12] )
		&& ((Instrucao_expected_prev[12] !== last_Instrucao_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Instrucao_exp[12] = Instrucao_expected_prev[12];
	end
	if (
		( Instrucao_expected_prev[13] !== 1'bx ) && ( Instrucao_prev[13] !== Instrucao_expected_prev[13] )
		&& ((Instrucao_expected_prev[13] !== last_Instrucao_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Instrucao_exp[13] = Instrucao_expected_prev[13];
	end
	if (
		( Instrucao_expected_prev[14] !== 1'bx ) && ( Instrucao_prev[14] !== Instrucao_expected_prev[14] )
		&& ((Instrucao_expected_prev[14] !== last_Instrucao_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Instrucao_exp[14] = Instrucao_expected_prev[14];
	end
	if (
		( Instrucao_expected_prev[15] !== 1'bx ) && ( Instrucao_prev[15] !== Instrucao_expected_prev[15] )
		&& ((Instrucao_expected_prev[15] !== last_Instrucao_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Instrucao_exp[15] = Instrucao_expected_prev[15];
	end
	if (
		( Instrucao_expected_prev[16] !== 1'bx ) && ( Instrucao_prev[16] !== Instrucao_expected_prev[16] )
		&& ((Instrucao_expected_prev[16] !== last_Instrucao_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Instrucao_exp[16] = Instrucao_expected_prev[16];
	end
	if (
		( R0_expected_prev[0] !== 1'bx ) && ( R0_prev[0] !== R0_expected_prev[0] )
		&& ((R0_expected_prev[0] !== last_R0_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R0_exp[0] = R0_expected_prev[0];
	end
	if (
		( R0_expected_prev[1] !== 1'bx ) && ( R0_prev[1] !== R0_expected_prev[1] )
		&& ((R0_expected_prev[1] !== last_R0_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R0_exp[1] = R0_expected_prev[1];
	end
	if (
		( R0_expected_prev[2] !== 1'bx ) && ( R0_prev[2] !== R0_expected_prev[2] )
		&& ((R0_expected_prev[2] !== last_R0_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R0_exp[2] = R0_expected_prev[2];
	end
	if (
		( R0_expected_prev[3] !== 1'bx ) && ( R0_prev[3] !== R0_expected_prev[3] )
		&& ((R0_expected_prev[3] !== last_R0_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R0_exp[3] = R0_expected_prev[3];
	end
	if (
		( R1_expected_prev[0] !== 1'bx ) && ( R1_prev[0] !== R1_expected_prev[0] )
		&& ((R1_expected_prev[0] !== last_R1_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R1_exp[0] = R1_expected_prev[0];
	end
	if (
		( R1_expected_prev[1] !== 1'bx ) && ( R1_prev[1] !== R1_expected_prev[1] )
		&& ((R1_expected_prev[1] !== last_R1_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R1_exp[1] = R1_expected_prev[1];
	end
	if (
		( R1_expected_prev[2] !== 1'bx ) && ( R1_prev[2] !== R1_expected_prev[2] )
		&& ((R1_expected_prev[2] !== last_R1_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R1_exp[2] = R1_expected_prev[2];
	end
	if (
		( R1_expected_prev[3] !== 1'bx ) && ( R1_prev[3] !== R1_expected_prev[3] )
		&& ((R1_expected_prev[3] !== last_R1_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R1_exp[3] = R1_expected_prev[3];
	end
	if (
		( R2_expected_prev[0] !== 1'bx ) && ( R2_prev[0] !== R2_expected_prev[0] )
		&& ((R2_expected_prev[0] !== last_R2_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R2_exp[0] = R2_expected_prev[0];
	end
	if (
		( R2_expected_prev[1] !== 1'bx ) && ( R2_prev[1] !== R2_expected_prev[1] )
		&& ((R2_expected_prev[1] !== last_R2_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R2_exp[1] = R2_expected_prev[1];
	end
	if (
		( R2_expected_prev[2] !== 1'bx ) && ( R2_prev[2] !== R2_expected_prev[2] )
		&& ((R2_expected_prev[2] !== last_R2_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R2_exp[2] = R2_expected_prev[2];
	end
	if (
		( R2_expected_prev[3] !== 1'bx ) && ( R2_prev[3] !== R2_expected_prev[3] )
		&& ((R2_expected_prev[3] !== last_R2_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R2_exp[3] = R2_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#20000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ARQ_Lab1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clock;
reg Clock14;
reg Externo0;
reg Externo1;
reg Externo2;
reg Externo3;
// wires                                               
wire Cout;
wire [5:0] Enderecoteste;
wire [16:0] Instrucao;
wire N;
wire [3:0] R0;
wire [3:0] R1;
wire [3:0] R2;
wire Write_Enable;
wire Z;

wire sampler;                             

// assign statements (if any)                          
ARQ_Lab1 i1 (
// port map - connection between master ports and signals/registers   
	.Clock(Clock),
	.Clock14(Clock14),
	.Cout(Cout),
	.Enderecoteste(Enderecoteste),
	.Externo0(Externo0),
	.Externo1(Externo1),
	.Externo2(Externo2),
	.Externo3(Externo3),
	.Instrucao(Instrucao),
	.N(N),
	.R0(R0),
	.R1(R1),
	.R2(R2),
	.Write_Enable(Write_Enable),
	.Z(Z)
);

// Clock
initial
begin
	Clock = 1'b1;
	# 10000;
	repeat(19)
	begin
		Clock = 1'b0;
		Clock = #500000 1'b1;
		# 500000;
	end
	Clock = 1'b0;
	Clock = #500000 1'b1;
end 

// Clock14
initial
begin
	Clock14 = 1'b1;
	# 50000;
	repeat(19)
	begin
		Clock14 = 1'b0;
		Clock14 = #500000 1'b1;
		# 500000;
	end
	Clock14 = 1'b0;
	Clock14 = #500000 1'b1;
end 

ARQ_Lab1_vlg_sample_tst tb_sample (
	.Clock(Clock),
	.Clock14(Clock14),
	.Externo0(Externo0),
	.Externo1(Externo1),
	.Externo2(Externo2),
	.Externo3(Externo3),
	.sampler_tx(sampler)
);

ARQ_Lab1_vlg_check_tst tb_out(
	.Cout(Cout),
	.Enderecoteste(Enderecoteste),
	.Instrucao(Instrucao),
	.N(N),
	.R0(R0),
	.R1(R1),
	.R2(R2),
	.Write_Enable(Write_Enable),
	.Z(Z),
	.sampler_rx(sampler)
);
endmodule

