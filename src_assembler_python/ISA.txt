  The instructions have to be written exaclty as stated at the sections PASSING EXAMPLE, otherwise
  the assembler will not recognize the desired instruction.
  Each register is represented by 3 bits, since we have 8 registers in the processor.

• ADD - Soma o valor de um registrador ao valor de outro registrador
  OPCODE:   00000

  PASSING EXAMPLE: ADD R0,R1,R2 -> R0 = R1 + R2 -> 00000 | xxx | R0 | R1 | R2 | -----------------------------


• SUB - Subtrai o valor de um registrador ao valor de outro registrador
  OPCODE:   00001

  PASSING EXAMPLE: SUB R0,R1,R2 -> R0 = R1 - R2 -> 00001 | xxx | R0 | R1 | R2 | -----------------------------


• ADDi - Soma o valor do dado ao valor de um registrador
  OPCODE:   00010

  PASSING EXAMPLE: ADDi R0,R1,IM -> R0 = R1 + IM -> 00010 | xx | R0 | R1 | IM of 4 bits | -----------------------------
  OBS:(imeadiates should be writen by the user as decimal)
  IMEDIATES HAVE 4 BITS and the assembler should pass the imeddiate as a binnary of 4 bits


• SUBi - Subtrai o valor do dado ao valor de um registrador
  OPCODE:   00011

  PASSING EXAMPLE: SUBi R0,R1,IM -> R0 = R1 - IM -> 00011 | xx | R0 | R1 | IM of 4 bits | -----------------------------
  IMEDIATES HAVE 4 BITS


• MUL2 - Multiplica o valor de um registrador por 2
  OPCODE:   00100

  PASSING EXAMPLE: MUL2 R0,R1 -> R0 = R1<<2 -> 00100 | R0 | R1 | xxxxxx | -----------------------------


• DIV2 - Divide o valor de um registrador por 2
  OPCODE:   00101

  PASSING EXAMPLE: DIV2 R0,R1 -> R0 = R1>>2 -> 00101 | R0 | R1 | xxxxxx | -----------------------------


• CLR - Zera o conteúdo de um registrador
  OPCODE:   00110

  PASSING EXAMPLE: CLR R0 -> R0 = 0 -> 00110 | R0 | xxxxxxxxx | -----------------------------


• RST - Zera o conteúdo de todos os registradores e reinicia a execução da primeira
instrução na memória
  OPCODE:   00111

  PASSING EXAMPLE: RST -> all registers are set to zero -> 00111 | xxxxxxxxxxxx | -----------------------------


• MOV – Copia o conteúdo de um registrador em outro registrador
  OPCODE:   01000

  PASSING EXAMPLE: MOV R0,R1 -> R0 = R1 -> 01000 | R0 | R1 | xxxxxx | -----------------------------


• JMP – Altera a seqüência de execução das instruções definindo o endereço da próxima
instrução a ser executada (JMP dddddd)
  OPCODE:   01001

  PASSING EXAMPLE: JMP address -> JMP to addr  -> 01001 | 6 bits of address |  xxxxxx |  -----------------------------
  ADDRESS is passed as 6 bits from assembler and the decoder reads the address bits.

  OBS:(addr should be writen as hexadecimal and has a range from 0x00 to 0x13)


• CMP - Compara o conteúdo de dois registradores e atualiza os flags de status de acordo com o resultado (sem salvá-lo)
  OPCODE: 01010

  PASSING EXAMPLE: CMP R0,R1 -> R0 - R1 -> 01010 | R0 | R1 | xxxxxx | -------------------------
  The flag Z is set, without saving the result.


• JZ – Modifica o valor de PC para endereçar a instrução definida em dddddd (JZ dddddd)
  OPCODE:   01011

  PASSING EXAMPLE: JZ address -> JZ to addr  -> 01011 | 6 bits of address |  xxxxxx |  -----------------------------
  ADDRESS is passed as 6 bits from assembler and the decoder reads the address bits.

  OBS:(addr should be writen as hexadecimal and has a range from 0x00 to 0x13)
  OBS1: in order to correctly accomplish the use of JZ command, the user has to necessarily use a
        SUB or CMP command before to set the zero flag from ALU


• INC – Incrementa o conteúdo de um registrador
  OPCODE:   01100

  PASSING EXAMPLE: INC R0,R1 -> R0 = R1 + 1 -> 01100 | R0 | R1 | xxxxxx | -----------------------------


• DEC – Decrementa o conteúdo de um registrador (DEC regA)
  OPCODE:   01101

  PASSING EXAMPLE: DEC R0,R1 -> R0 = R1 - 1 -> 01101 | R0 | R1 | xxxxxx | -----------------------------


• LOADM – Carrega um dado da memória em um registrador
  OPCODE:   01110

  PASSING EXAMPLE: LOAD R0,addr -> R0 = addr -> 01110 | R0 | addr of 4 bits | xxxxx | -----------------------------
  In this case the address has only 4 bits and the assembler passes the address as 4 bits
  OBS:(addr should be writen as hexadecimal and has a range from 0x0 to 0xF)


• STOREM – Salva um dado de um registrador na memória
  OPCODE:   01111

  PASSING EXAMPLE: STORE R0,addr -> R0 = addr -> 01111 | R0 | addr of 4 bits | xxxxx | -----------------------------
  In this case the address has only 4 bits and the assembler passes the address as 4 bits
  OBS:(addr should be writen as hexadecimal and has a range from 0x0 to 0xF)


• RIO - Read IO Escreve um conteúdo em um periférico
  OPCODE: 10000

  PASSING EXAMPLE: RIO R0 -> Read pheriperical value in register R0 -> 10000 | RO | xxxxxxxxx | ---------------


